"use strict";
/**
 * @packageDocumentation
 *
 * An extension to ether's bignumber library that manually
 * polyfills any methods we need for tests by converting the
 * numbers back and forth between ethers.utils.BigNumber and
 * bn.js. If we end up having to replace a ton of methods in the
 * future this way, it might be worth creating a proxy object
 * that automatically does these method polyfills for us.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.extend = void 0;
const ethers_1 = require("ethers");
const BN = require("bn.js");
const BN_1 = new BN(-1);
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L42
function bnify(value) {
    const hex = value.toHexString();
    if (hex[0] === '-') {
        return new BN(hex.substring(3), 16).mul(BN_1);
    }
    return new BN(hex.substring(2), 16);
}
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L22
function toHex(bn) {
    const value = bn.toString(16);
    if (value[0] === '-') {
        if (value.length % 2 === 0) {
            return '-0x0' + value.substring(1);
        }
        return '-0x' + value.substring(1);
    }
    if (value.length % 2 === 1) {
        return '0x0' + value;
    }
    return '0x' + value;
}
// https://github.com/ethers-io/ethers.js/blob/v4.0.41/src.ts/utils/bignumber.ts#L38
function toBigNumber(bn) {
    return new ethers_1.ethers.utils.BigNumber(toHex(bn));
}
function extend(bignumber) {
    bignumber.prototype.isEven = function () {
        return bnify(this).isEven();
    };
    bignumber.prototype.umod = function (val) {
        return toBigNumber(bnify(this).umod(bnify(val)));
    };
    bignumber.prototype.shrn = function (val) {
        return toBigNumber(bnify(this).shrn(val));
    };
    bignumber.prototype.invm = function (val) {
        return toBigNumber(bnify(this).invm(bnify(val)));
    };
}
exports.extend = extend;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmlnTnVtYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2V4dGVuc2lvbnMvZXRoZXJzL0JpZ051bWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7Ozs7Ozs7OztHQVNHOzs7QUFFSCxtQ0FBK0I7QUFDL0IsNEJBQTRCO0FBZ0I1QixNQUFNLElBQUksR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZCLG9GQUFvRjtBQUNwRixTQUFTLEtBQUssQ0FBQyxLQUE2QjtJQUMxQyxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDL0IsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1FBQ2xCLE9BQU8sSUFBSSxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7S0FDOUM7SUFDRCxPQUFPLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7QUFDckMsQ0FBQztBQUVELG9GQUFvRjtBQUNwRixTQUFTLEtBQUssQ0FBQyxFQUFNO0lBQ25CLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDN0IsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO1FBQ3BCLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFCLE9BQU8sTUFBTSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDbkM7UUFDRCxPQUFPLEtBQUssR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFBO0tBQ2xDO0lBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDMUIsT0FBTyxLQUFLLEdBQUcsS0FBSyxDQUFBO0tBQ3JCO0lBQ0QsT0FBTyxJQUFJLEdBQUcsS0FBSyxDQUFBO0FBQ3JCLENBQUM7QUFFRCxvRkFBb0Y7QUFDcEYsU0FBUyxXQUFXLENBQUMsRUFBTTtJQUN6QixPQUFPLElBQUksZUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7QUFDOUMsQ0FBQztBQUVELFNBQWdCLE1BQU0sQ0FBQyxTQUF3QztJQUM3RCxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRztRQUMzQixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQTtJQUM3QixDQUFDLENBQUE7SUFFRCxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUFVLEdBQVE7UUFDM0MsT0FBTyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2xELENBQUMsQ0FBQTtJQUVELFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsR0FBUTtRQUMzQyxPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDM0MsQ0FBQyxDQUFBO0lBRUQsU0FBUyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxHQUFRO1FBQzNDLE9BQU8sV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNsRCxDQUFDLENBQUE7QUFDSCxDQUFDO0FBaEJELHdCQWdCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKlxuICogQW4gZXh0ZW5zaW9uIHRvIGV0aGVyJ3MgYmlnbnVtYmVyIGxpYnJhcnkgdGhhdCBtYW51YWxseVxuICogcG9seWZpbGxzIGFueSBtZXRob2RzIHdlIG5lZWQgZm9yIHRlc3RzIGJ5IGNvbnZlcnRpbmcgdGhlXG4gKiBudW1iZXJzIGJhY2sgYW5kIGZvcnRoIGJldHdlZW4gZXRoZXJzLnV0aWxzLkJpZ051bWJlciBhbmRcbiAqIGJuLmpzLiBJZiB3ZSBlbmQgdXAgaGF2aW5nIHRvIHJlcGxhY2UgYSB0b24gb2YgbWV0aG9kcyBpbiB0aGVcbiAqIGZ1dHVyZSB0aGlzIHdheSwgaXQgbWlnaHQgYmUgd29ydGggY3JlYXRpbmcgYSBwcm94eSBvYmplY3RcbiAqIHRoYXQgYXV0b21hdGljYWxseSBkb2VzIHRoZXNlIG1ldGhvZCBwb2x5ZmlsbHMgZm9yIHVzLlxuICovXG5cbmltcG9ydCB7IGV0aGVycyB9IGZyb20gJ2V0aGVycydcbmltcG9ydCBCTiA9IHJlcXVpcmUoJ2JuLmpzJylcblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5hbWVzcGFjZSAqL1xuZGVjbGFyZSBtb2R1bGUgJ2V0aGVycycge1xuICBuYW1lc3BhY2UgZXRoZXJzIHtcbiAgICBuYW1lc3BhY2UgdXRpbHMge1xuICAgICAgaW50ZXJmYWNlIEJpZ051bWJlciB7XG4gICAgICAgIGlzRXZlbigpOiBib29sZWFuXG4gICAgICAgIHVtb2QodmFsOiBldGhlcnMudXRpbHMuQmlnTnVtYmVyKTogZXRoZXJzLnV0aWxzLkJpZ051bWJlclxuICAgICAgICBzaHJuKHZhbDogbnVtYmVyKTogZXRoZXJzLnV0aWxzLkJpZ051bWJlclxuICAgICAgICBpbnZtKHZhbDogZXRoZXJzLnV0aWxzLkJpZ051bWJlcik6IGV0aGVycy51dGlscy5CaWdOdW1iZXJcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuY29uc3QgQk5fMSA9IG5ldyBCTigtMSlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcnMtaW8vZXRoZXJzLmpzL2Jsb2IvdjQuMC40MS9zcmMudHMvdXRpbHMvYmlnbnVtYmVyLnRzI0w0MlxuZnVuY3Rpb24gYm5pZnkodmFsdWU6IGV0aGVycy51dGlscy5CaWdOdW1iZXIpOiBCTiB7XG4gIGNvbnN0IGhleCA9IHZhbHVlLnRvSGV4U3RyaW5nKClcbiAgaWYgKGhleFswXSA9PT0gJy0nKSB7XG4gICAgcmV0dXJuIG5ldyBCTihoZXguc3Vic3RyaW5nKDMpLCAxNikubXVsKEJOXzEpXG4gIH1cbiAgcmV0dXJuIG5ldyBCTihoZXguc3Vic3RyaW5nKDIpLCAxNilcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2V0aGVycy1pby9ldGhlcnMuanMvYmxvYi92NC4wLjQxL3NyYy50cy91dGlscy9iaWdudW1iZXIudHMjTDIyXG5mdW5jdGlvbiB0b0hleChibjogQk4pOiBzdHJpbmcge1xuICBjb25zdCB2YWx1ZSA9IGJuLnRvU3RyaW5nKDE2KVxuICBpZiAodmFsdWVbMF0gPT09ICctJykge1xuICAgIGlmICh2YWx1ZS5sZW5ndGggJSAyID09PSAwKSB7XG4gICAgICByZXR1cm4gJy0weDAnICsgdmFsdWUuc3Vic3RyaW5nKDEpXG4gICAgfVxuICAgIHJldHVybiAnLTB4JyArIHZhbHVlLnN1YnN0cmluZygxKVxuICB9XG4gIGlmICh2YWx1ZS5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgcmV0dXJuICcweDAnICsgdmFsdWVcbiAgfVxuICByZXR1cm4gJzB4JyArIHZhbHVlXG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcnMtaW8vZXRoZXJzLmpzL2Jsb2IvdjQuMC40MS9zcmMudHMvdXRpbHMvYmlnbnVtYmVyLnRzI0wzOFxuZnVuY3Rpb24gdG9CaWdOdW1iZXIoYm46IEJOKTogZXRoZXJzLnV0aWxzLkJpZ051bWJlciB7XG4gIHJldHVybiBuZXcgZXRoZXJzLnV0aWxzLkJpZ051bWJlcih0b0hleChibikpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQoYmlnbnVtYmVyOiB0eXBlb2YgZXRoZXJzLnV0aWxzLkJpZ051bWJlcikge1xuICBiaWdudW1iZXIucHJvdG90eXBlLmlzRXZlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gYm5pZnkodGhpcykuaXNFdmVuKClcbiAgfVxuXG4gIGJpZ251bWJlci5wcm90b3R5cGUudW1vZCA9IGZ1bmN0aW9uICh2YWw6IGFueSkge1xuICAgIHJldHVybiB0b0JpZ051bWJlcihibmlmeSh0aGlzKS51bW9kKGJuaWZ5KHZhbCkpKVxuICB9XG5cbiAgYmlnbnVtYmVyLnByb3RvdHlwZS5zaHJuID0gZnVuY3Rpb24gKHZhbDogYW55KSB7XG4gICAgcmV0dXJuIHRvQmlnTnVtYmVyKGJuaWZ5KHRoaXMpLnNocm4odmFsKSlcbiAgfVxuXG4gIGJpZ251bWJlci5wcm90b3R5cGUuaW52bSA9IGZ1bmN0aW9uICh2YWw6IGFueSkge1xuICAgIHJldHVybiB0b0JpZ051bWJlcihibmlmeSh0aGlzKS5pbnZtKGJuaWZ5KHZhbCkpKVxuICB9XG59XG4iXX0=