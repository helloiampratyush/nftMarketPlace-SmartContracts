"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ganache = void 0;
// tslint:disable
const BN = require('bn.js');
const eGanache = __importStar(require("ganache-core"));
const ethjs_common_v1_1 = __importDefault(require("ethjs-common-v1"));
/* Internal Imports */
const to_1 = require("./internal/to");
const utils_1 = require("../utils");
function createVMFromStateTrie(state, activatePrecompiles, ovm) {
    const self = this;
    const common = ethjs_common_v1_1.default.forCustomChain('mainnet', // TODO needs to match chain id
    {
        name: 'ganache',
        networkId: self.options.network_id || self.forkVersion,
        chainId: self.options._chainId,
        comment: 'Local test network',
        bootstrapNodes: [],
    }, self.options.hardfork);
    const vm = utils_1.makeOVM({
        evmOpts: {
            state: state,
            common,
            blockchain: {
                // EthereumJS VM needs a blockchain object in order to get block information.
                // When calling getBlock() it will pass a number that's of a Buffer type.
                // Unfortunately, it uses a 64-character buffer (when converted to hex) to
                // represent block numbers as well as block hashes. Since it's very unlikely
                // any block number will get higher than the maximum safe Javascript integer,
                // we can convert this buffer to a number ahead of time before calling our
                // own getBlock(). If the conversion succeeds, we have a block number.
                // If it doesn't, we have a block hash. (Note: Our implementation accepts both.)
                getBlock: function (number, done) {
                    try {
                        number = typeof to_1.to.number(number);
                    }
                    catch (e) {
                        // Do nothing; must be a block hash.
                    }
                    self.getBlock(number, done);
                },
            },
            activatePrecompiles: activatePrecompiles || false,
            allowUnlimitedContractSize: self.options.allowUnlimitedContractSize,
        },
        ovmOpts: ovm
            ? {
                initialized: ovm.contracts &&
                    ovm.contracts.OVM_ExecutionManager.address.length !== 0,
                contracts: ovm.contracts,
            }
            : {},
    });
    if (self.options.debug === true) {
        // log executed opcodes, including args as hex
        vm.on('step', function (info) {
            var name = info.opcode.name;
            var argsNum = info.opcode.in;
            if (argsNum) {
                var args = info.stack
                    .slice(-argsNum)
                    .map((arg) => to_1.to.hex(arg))
                    .join(' ');
                self.logger.log(`${name} ${args}`);
            }
            else {
                self.logger.log(name);
            }
        });
    }
    return vm;
}
const wrap = (provider, opts = {}) => {
    const gasLimit = opts.gasLimit || 100000000;
    const blockchain = provider.engine.manager.state.blockchain;
    blockchain.blockGasLimit = '0x' + new BN(gasLimit).toString('hex');
    let ovm;
    blockchain.createVMFromStateTrie = function (state, activatePrecompiles) {
        const vm = createVMFromStateTrie.call(this, state, activatePrecompiles, ovm);
        if (!ovm) {
            ovm = vm;
        }
        return vm;
    };
    blockchain.estimateGas = function (tx, blockNumber, callback) {
        callback(null, {
            gasEstimate: new BN(gasLimit),
        });
    };
    const _send = provider.send.bind(provider);
    const _wrappedSend = (payload, cb) => {
        if (payload.method === 'eth_getProof') {
            ovm
                .getEthTrieProof(payload.params[0], payload.params[1])
                .then((ethTrieProof) => {
                cb(null, {
                    id: payload.id,
                    jsonrpc: '2.0',
                    result: ethTrieProof,
                });
            })
                .catch((err) => {
                cb(err, null);
            });
        }
        else if (payload.method === 'eth_getAccount') {
            ovm
                .getEthAccount(payload.params[0])
                .then((account) => {
                cb(null, {
                    id: payload.id,
                    jsonrpc: '2.0',
                    result: account,
                });
            })
                .catch((err) => {
                cb(err, null);
            });
        }
        else {
            _send(payload, cb);
        }
    };
    provider.send = _wrappedSend;
    provider.sendAsync = _wrappedSend;
    return provider;
};
const provider = (opts) => {
    const gProvider = eGanache.provider(opts);
    return wrap(gProvider, opts);
};
const server = (opts) => {
    const gServer = eGanache.server(opts);
    gServer.provider = wrap(gServer.provider, opts);
    return gServer;
};
exports.ganache = {
    provider,
    server,
};
//# sourceMappingURL=index.js.map