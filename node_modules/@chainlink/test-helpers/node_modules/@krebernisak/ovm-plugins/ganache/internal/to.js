"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.to = void 0;
const utils = __importStar(require("ethjs-util-v6"));
const ethers_1 = require("ethers");
exports.to = {
    hex: (val) => {
        if (typeof val === 'string') {
            if (val.indexOf('0x') === 0) {
                return val.trim();
            }
            else {
                val = new utils.BN(val);
            }
        }
        if (typeof val === 'boolean') {
            val = val ? 1 : 0;
        }
        if (typeof val === 'number') {
            val = ethers_1.BigNumber.from(val).toHexString();
        }
        else if (val == null) {
            return '0x';
        }
        else if (typeof val === 'object') {
            // Support Buffer, BigInteger and BN library
            // Hint: BN is used in ethereumjs
            val = val.toString('hex');
        }
        return utils.addHexPrefix(val);
    },
    number: (val) => {
        if (typeof val === 'number') {
            return val;
        }
        if (typeof val === 'string') {
            if (val.indexOf('0x') !== 0) {
                return parseInt(val, 10);
            }
        }
        return utils.bufferToInt(utils.toBuffer(val));
    },
};
//# sourceMappingURL=to.js.map