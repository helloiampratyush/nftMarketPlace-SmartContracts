{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/mrketPlace.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nerror nftMarketPlace__notZeroPriceNft();\nerror nftMarketPlace__notApprovedByMarketPlace();\nerror nftMarketPlace__alreadyListed(address nftAddress, uint256 tokenID);\nerror nftMarketPlace__notOwner();\nerror nftMarketPlace__notListed(address nftAddress, uint256 tokenID);\nerror nftMarketPlace__notListedPrice(\n  address nftAddress,\n  uint256 tokenId,\n  uint256 price\n);\nerror nftMarketPlace__notAnyProceed();\nerror nftMarketPlace__transactionFailed();\n\ncontract nftMarketPlace {\n  struct Listing {\n    uint256 price;\n    address seller;\n  }\n  //events\n  event itemListed(\n    address indexed seller,\n    address indexed nftAddress,\n    uint256 indexed tokenId,\n    uint256 price\n  );\n  event itemBought(\n    address indexed buyer,\n    address indexed nftAddress,\n    uint256 indexed tokenID,\n    uint256 Price\n  );\n  event itemCanceled(\n    address indexed seller,\n    address indexed nftAddress,\n    uint256 indexed tokenID\n  );\n\n  //nft contract address=>tokenId=>(price,seller)\n  mapping(address => mapping(uint256 => Listing)) private s_listings;\n  mapping(address => uint256) private s_proceed;\n  //modifiers\n  modifier notListed(\n    address nftAddress,\n    uint256 tokenID,\n    address owner\n  ) {\n    Listing memory listing = s_listings[nftAddress][tokenID];\n    if (listing.price >= 0) {\n      revert nftMarketPlace__alreadyListed(nftAddress, tokenID);\n    }\n    _;\n  }\n  modifier isOwner(\n    address nftAddress,\n    uint256 tokenID,\n    address spender\n  ) {\n    IERC721 nft = IERC721(nftAddress);\n    address owner = nft.ownerOf(tokenID);\n    if (spender != owner) {\n      revert nftMarketPlace__notOwner();\n    }\n    _;\n  }\n  modifier isListed(address nftAddress, uint256 tokenID) {\n    Listing memory listing = s_listings[nftAddress][tokenID];\n    if (listing.price <= 0) {\n      revert nftMarketPlace__notListed(nftAddress, tokenID);\n    }\n    _;\n  }\n\n  /*send nft to the contract=> transfer->contracts \"hold \"the nft\n owner can still hold their nft and approve the marketPlace to sell nft for them\n   */\n  /*\n   * @notice Method for listing NFT\n   * @param nftAddress Address of NFT contract\n   * @param tokenId Token ID of NFT\n   * @param price sale price for each item\n   */\n  /////////////////\n  //main function//\n  /////////////////\n  function listItem(\n    address nftAddress,\n    uint256 tokenID,\n    uint256 price\n  )\n    external\n    notListed(nftAddress, tokenID, msg.sender)\n    isOwner(nftAddress, tokenID, msg.sender)\n  {\n    if (price <= 0) {\n      revert nftMarketPlace__notZeroPriceNft();\n    }\n    IERC721 nft = IERC721(nftAddress);\n    if (nft.getApproved(tokenID) != address(this)) {\n      revert nftMarketPlace__notApprovedByMarketPlace();\n    }\n    s_listings[nftAddress][tokenID] = Listing(price, msg.sender);\n    emit itemListed(msg.sender, nftAddress, tokenID, price);\n  }\n\n  function buyItem(\n    address nftAddress,\n    uint256 tokenID\n  ) external payable isListed(nftAddress, tokenID) {\n    Listing memory listedItem = s_listings[nftAddress][tokenID];\n    if (msg.value < listedItem.price) {\n      revert nftMarketPlace__notListedPrice(\n        nftAddress,\n        tokenID,\n        listedItem.price\n      );\n    }\n    s_proceed[listedItem.seller] = s_proceed[listedItem.seller] + msg.value;\n    delete (s_listings[nftAddress][tokenID]);\n    IERC721(nftAddress).safeTransferFrom(\n      listedItem.seller,\n      msg.sender,\n      tokenID\n    );\n    emit itemBought(msg.sender, nftAddress, tokenID, listedItem.price);\n  }\n\n  function cancelItem(\n    address nftAddress,\n    uint256 tokenID\n  )\n    external\n    isListed(nftAddress, tokenID)\n    isOwner(nftAddress, tokenID, msg.sender)\n  {\n    delete (s_listings[nftAddress][tokenID]);\n    emit itemCanceled(msg.sender, nftAddress, tokenID);\n  }\n\n  function updateItem(\n    address nftAddress,\n    uint256 tokenID,\n    uint256 newPrice\n  )\n    external\n    isListed(nftAddress, tokenID)\n    isOwner(nftAddress, tokenID, msg.sender)\n  {\n    s_listings[nftAddress][tokenID].price = newPrice;\n    emit itemListed(msg.sender, nftAddress, tokenID, newPrice);\n  }\n\n  function withdrawProceed() external {\n    uint256 proceed = s_proceed[msg.sender];\n    if (proceed <= 0) {\n      revert nftMarketPlace__notAnyProceed();\n    }\n    s_proceed[msg.sender] = 0;\n    (bool success, ) = payable(msg.sender).call{ value: proceed }(\"\");\n    if (!success) {\n      revert nftMarketPlace__transactionFailed();\n    }\n  }\n\n  //listItem-list item in nft market place\n  //buyItem-buy the nft\n  //replaceiTEM-cancle the listing\n  //updatelisting-update the price\n  //withdraw proceed -withdraw payment for my bought nfts\n  ////////////////////\n  //getter function //\n  ////////////////////\n  function getListing(\n    address nftAddress,\n    uint256 tokenID\n  ) external view returns (Listing memory) {\n    return s_listings[nftAddress][tokenID];\n  }\n\n  function getProceed(address seller) external view returns (uint256) {\n    return s_proceed[seller];\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}